@page "/unidadmedicion"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JS
@inherits ValidacionAcceso

<PageTitle>Lista de sentidos</PageTitle>

<h1>Unidad Medicion</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormularioCrear">Crear Nuevo</button>
</div>

@if (mostrarFormularioCrear)
{
    <div class="card p-3 mb-3">
        <h5>Nueva Unidad medicion</h5>
        <label>Descripcion:</label>
        <input @bind="descripcionNuevoUnidadMedicion" class="form-control" placeholder="Ingrese la descripcion de la unidad de medicion" />
        <button class="btn btn-success mt-2" @onclick="CrearNuevoUnidadMedicion">Guardar</button>
        <button class="btn btn-secondary mt-2" @onclick="CancelarFormulario">Cancelar</button>
    </div>
}

@if (mostrarFormularioEditar)
{
    <div class="card p-3 mb-3">
        <h5>Editar Unidad medicion</h5>
        <label>Nueva Descripcion:</label>
        <input @bind="descripcionEditado" class="form-control" placeholder="Ingrese la nueva descripcion" />
        <button class="btn btn-warning mt-2" @onclick="ActualizarUnidadMedicion">Actualizar</button>
        <button class="btn btn-secondary mt-2" @onclick="CancelarFormulario">Cancelar</button>
    </div>
}

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (productos == null || productos.Count == 0)
{
    <p>No hay productos disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Descripcion</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in productos)
                {
                    <tr>
                        <td>@ObtenerValor(producto, "descripcion")</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => MostrarFormularioEditar(producto)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarUnidadMedicion(producto)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> productos = new List<Dictionary<string, object>>();

    private bool cargando = true;

    private string? errorMensaje = null;

    private const string PROYECTO = "Trabajo";

    private const string TABLA = "unidadmedicion";

    private bool mostrarFormularioCrear = false;

    private string descripcionNuevoUnidadMedicion = "";

    private bool mostrarFormularioEditar = false;

    private string descripcionEditado = "";

    private string claveEditando = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        cargando = true;
        errorMensaje = null;
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            productos = resultado ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar productos: {ex.Message}";
            productos = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CrearNuevoUnidadMedicion()
    {
        var nuevaEntidad = new Dictionary<string, object>
        {
            { "descripcion", descripcionNuevoUnidadMedicion }
        };
        bool creado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevaEntidad);
        if (creado)
        {
            descripcionNuevoUnidadMedicion = "";
            mostrarFormularioCrear = false;
            await CargarProductos();
        }
        else
        {
            errorMensaje = "Error al crear la unidad de medicion.";
        }
    }

    private void MostrarFormularioCrear()
    {
        mostrarFormularioCrear = true;
        mostrarFormularioEditar = false;
    }

    private void MostrarFormularioEditar(Dictionary<string, object> producto)
    {
        claveEditando = ObtenerValor(producto, "descripcion");
        descripcionEditado = claveEditando;
        mostrarFormularioEditar = true;
        mostrarFormularioCrear = false;
    }

    private async Task ActualizarUnidadMedicion()
    {
        var entidadActualizada = new Dictionary<string, object>
        {
            { "descripcion", descripcionEditado }
        };
        bool actualizado = await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "descripcion", claveEditando, entidadActualizada);
        if (actualizado)
        {
            mostrarFormularioEditar = false;
            await CargarProductos();
        }
        else
        {
            errorMensaje = "Error al actualizar la unidad medicion.";
        }
    }

    private async Task EliminarUnidadMedicion(Dictionary<string, object> producto)
    {
        string claveEliminar = ObtenerValor(producto, "descripcion");
        if (!await ConfirmarEliminacion(claveEliminar))
        {
            return;
        }
        bool eliminado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "descripcion", claveEliminar);
        if (eliminado)
        {
            await CargarProductos();
        }
        else
        {
            errorMensaje = "Error al eliminar la unidad medicion.";
        }
    }

    private async Task<bool> ConfirmarEliminacion(string nombre)
    {
        return await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro de que quieres eliminar '{nombre}'?");
    }

    private void CancelarFormulario()
    {
        mostrarFormularioCrear = false;
        mostrarFormularioEditar = false;
        descripcionNuevoUnidadMedicion = "";
        descripcionEditado = "";
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario == null) return string.Empty;
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? string.Empty : string.Empty;
    }
}
