@page "/usuario"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JS

<PageTitle>Lista de Usuarios</PageTitle>

<h1>Usuarios</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormularioCrear">Crear Nuevo</button>
</div>

@if (mostrarFormularioCrear)
{
    <div class="card p-3 mb-3">
        <h5>Nuevo Usuario</h5>
        <label>Email:</label>
        <input @bind="emailUsuario" class="form-contUsuario" placeholder="Ingrese el email del Usuario" />
        <label>Contraseña:</label>
        <input @bind="contrasenaUsuario" class="form-contUsuario" placeholder="Ingrese la contraseña del usuario" />
        <label>Roles:</label>
        <select class="form-control" @bind="CodigoRolAgregar">
                                    @foreach (var v in Roles)
                                    {
                                        <option value="@ObtenerValor(v, "id")">@ObtenerValor(v, "nombre")</option>
                                    }
         </select>
        <button class="btn btn-primary mt-2" @onclick="AgregarRol">Agregar</button>
        <ul class="list-group">
                            @foreach (var item in RolesUsuariosAgregados)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @item["fkidrol"] 
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarRol(item)">Eliminar</button>
                                </li>
                            }
        </ul>
        <button class="btn btn-success mt-2" @onclick="GuardarUsuario">Guardar</button>
        <button class="btn btn-secondary mt-2" @onclick="CancelarFormulario">Cancelar</button>
    </div>
}

@if (mostrarFormularioEditar)
{
    <div class="card p-3 mb-3">
        <h5>Editar Usuario</h5>
        <label>Nuevo email:</label>
        <input @bind="emailUsuario" class="form-contUsuario" placeholder="Ingrese el email del Usuario" />
        <label>Contraseña:</label>
        <input @bind="contrasenaUsuario" class="form-contUsuario" placeholder="Ingrese la contraseña del usuario" />
        <label>Roles:</label>
        <select class="form-control" @bind="CodigoRolAgregar">
                                    @foreach (var v in Roles)
                                    {
                                        <option value="@ObtenerValor(v, "id")">@ObtenerValor(v, "nombre")</option>
                                    }
         </select>
        <button class="btn btn-primary mt-2" @onclick="AgregarRol">Agregar</button>
        <ul class="list-group">
                            @foreach (var item in RolesUsuariosAgregados)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @item["fkidrol"] 
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarRol(item)">Eliminar</button>
                                </li>
                            }
        </ul>
        <button class="btn btn-success mt-2" @onclick="EditarUsuario">Guardar</button>
        <button class="btn btn-secondary mt-2" @onclick="CancelarFormulario">Cancelar</button>
    </div>
}

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (Usuarios == null || Usuarios.Count == 0)
{
    <p>No hay Usuarios disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>email</th>
                    <th>contraseña</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Usuario in Usuarios)
                {
                    <tr>
                        <td>@ObtenerValor(Usuario, "email")</td>
                        <td>@ObtenerValor(Usuario, "contrasena")</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => MostrarFormularioEditar(Usuario)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DropUsuario(Usuario)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> Usuarios = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> Roles = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> RolesUsuarios = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> RolesUsuariosAgregados = new List<Dictionary<string, object>>();

    private bool cargando = true;

    private string? errorMensaje = null;

    private const string PROYECTO = "Trabajo";

    private const string TABLA = "usuario";

    // Variables para el formulario de creación
    private bool mostrarFormularioCrear = false;

    private string emailUsuario = "";
    private string contrasenaUsuario = "";
    private string CodigoRolAgregar = "";


    // Variables para el formulario de edición
    private bool mostrarFormularioEditar = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
        await CargarRol();
        await CargarRolesUsuarios();
    }
    private async Task CargarRol()
    {
        Roles = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "rol") ?? new();
    }
    private async Task CargarRolesUsuarios()
    {
        RolesUsuarios = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "rol_usuario") ?? new();
    }

    private async Task CargarUsuarios()
    {
        cargando = true;
        errorMensaje = null;
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            Usuarios = resultado ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar Usuarios: {ex.Message}";
            Usuarios = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }


    private void MostrarFormularioCrear()
    {
        mostrarFormularioCrear = true;
        mostrarFormularioEditar = false;
    }

    private void MostrarFormularioEditar(Dictionary<string, object> Usuario)
    {
        emailUsuario = ObtenerValor(Usuario, "email");
        contrasenaUsuario = ObtenerValor(Usuario, "contrasena");
        foreach (var v in RolesUsuarios)
            {   
                if (ObtenerValor(v,"fkemail") == emailUsuario){
                    RolesUsuariosAgregados.Add(new Dictionary<string, object>
                    {
                        { "fkidrol", ObtenerValor(v,"fkidrol") }
                    });
                }
            }
        mostrarFormularioEditar = true;
        mostrarFormularioCrear = false;
    }

    

    private async Task EliminarUsuario(Dictionary<string, object> Usuario)
    {
        string claveEliminar = ObtenerValor(Usuario, "email");
        if (!await ConfirmarEliminacion(claveEliminar))
        {
            return; // Si el usuario cancela, no se realizara la eliminacion
        }
        bool eliminado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "email", claveEliminar);
        if (eliminado)
        {
            await CargarUsuarios(); // Funcion para recargar la pagina y consultas
        }
        else
        {
            errorMensaje = "Error al eliminar el Usuario.";
        }
    }

    private async Task<bool> ConfirmarEliminacion(string email)
    {
        return await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro de que quieres eliminar '{email}'?");
    }

    private void CancelarFormulario()
    {
        mostrarFormularioCrear = false;
        mostrarFormularioEditar = false;
        emailUsuario = "";
        contrasenaUsuario = "";
        RolesUsuariosAgregados.Clear();
    }

    private async Task GuardarUsuario()
    {
        try
        {
            var parametros = new Dictionary<string, object>
            {
                { "email", emailUsuario },
                { "contrasena", contrasenaUsuario },
                { "roles", RolesUsuariosAgregados } // ← Aquí está el cambio
            };

            var respuesta = await servicioEntidad.EjecutarProcedimientoAsync(
                "proyecto",
                "factura",
                "insertar_usuario_y_roles",
                parametros
            );

            if (respuesta != null)
            {
                emailUsuario = "";
                contrasenaUsuario = "";
                RolesUsuariosAgregados.Clear();
                mostrarFormularioCrear = false;
                await CargarUsuarios();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar usuario: {ex.Message}");
        }
    }

    private async Task EditarUsuario()
    {
        try
        {
            var parametros = new Dictionary<string, object>
            {
                { "email", emailUsuario },
                { "contrasena", contrasenaUsuario },
                { "roles", RolesUsuariosAgregados } // ← Aquí está el cambio
            };

            var respuesta = await servicioEntidad.EjecutarProcedimientoAsync(
                "proyecto",
                "factura",
                "editar_usuario_y_roles",
                parametros
            );

            if (respuesta != null)
            {
                emailUsuario = "";
                contrasenaUsuario = "";
                RolesUsuariosAgregados.Clear();
                mostrarFormularioEditar = false;
                await CargarUsuarios();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar usuario: {ex.Message}");
        }
    }

    private void AgregarRol()
    {
        if (!string.IsNullOrWhiteSpace(CodigoRolAgregar))
        {
            RolesUsuariosAgregados.Add(new Dictionary<string, object>
            {
                { "fkidrol", CodigoRolAgregar }
            });

            CodigoRolAgregar = "";
        }
    }
    private void EliminarRol(Dictionary<string, object> producto)
    {
        RolesUsuariosAgregados.Remove(producto);
    }

    
    private async Task DropUsuario(Dictionary<string, object> Usuario)
    {
        try
        {
            if (!await ConfirmarEliminacion(ObtenerValor(Usuario, "email")))
            {
                return; // Si el usuario cancela, no se realizara la eliminacion
            }
            var parametros = new Dictionary<string, object>
            {
                { "email", ObtenerValor(Usuario, "email") }
            };

            var respuesta = await servicioEntidad.EjecutarProcedimientoAsync(
                "proyecto",
                "factura",
                "elimiar_usuario_y_roles",
                parametros
            );

            if (respuesta != null)
            {
                await CargarUsuarios();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar usuario: {ex.Message}");
        }
    }
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario == null) return string.Empty;
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? string.Empty : string.Empty;
    }
}
